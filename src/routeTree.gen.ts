/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlayIndexImport } from './routes/play/index'
import { Route as homeIndexImport } from './routes/(home)/index'
import { Route as PlayTetrisIndexImport } from './routes/play/tetris/index'

// Create/Update Routes

const PlayIndexRoute = PlayIndexImport.update({
  id: '/play/',
  path: '/play/',
  getParentRoute: () => rootRoute,
} as any)

const homeIndexRoute = homeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlayTetrisIndexRoute = PlayTetrisIndexImport.update({
  id: '/play/tetris/',
  path: '/play/tetris/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeIndexImport
      parentRoute: typeof rootRoute
    }
    '/play/': {
      id: '/play/'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayIndexImport
      parentRoute: typeof rootRoute
    }
    '/play/tetris/': {
      id: '/play/tetris/'
      path: '/play/tetris'
      fullPath: '/play/tetris'
      preLoaderRoute: typeof PlayTetrisIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof homeIndexRoute
  '/play': typeof PlayIndexRoute
  '/play/tetris': typeof PlayTetrisIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof homeIndexRoute
  '/play': typeof PlayIndexRoute
  '/play/tetris': typeof PlayTetrisIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(home)/': typeof homeIndexRoute
  '/play/': typeof PlayIndexRoute
  '/play/tetris/': typeof PlayTetrisIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/play' | '/play/tetris'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/play' | '/play/tetris'
  id: '__root__' | '/(home)/' | '/play/' | '/play/tetris/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  homeIndexRoute: typeof homeIndexRoute
  PlayIndexRoute: typeof PlayIndexRoute
  PlayTetrisIndexRoute: typeof PlayTetrisIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  homeIndexRoute: homeIndexRoute,
  PlayIndexRoute: PlayIndexRoute,
  PlayTetrisIndexRoute: PlayTetrisIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(home)/",
        "/play/",
        "/play/tetris/"
      ]
    },
    "/(home)/": {
      "filePath": "(home)/index.tsx"
    },
    "/play/": {
      "filePath": "play/index.tsx"
    },
    "/play/tetris/": {
      "filePath": "play/tetris/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
